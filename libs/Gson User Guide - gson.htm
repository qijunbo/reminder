<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="chrome=1">
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var b=window,e="chrome",g="tick",h="wtsrt_",l="tbsd_",m="tbnd_",n="start",p="_wtsrt",q="_tbnd",r="CSI/";(function(){function k(a){this.t={};this.tick=function(a,d,c){this.t[a]=[void 0!=c?c:(new Date).getTime(),d];if(void 0==c)try{b.console.timeStamp(r+a)}catch(f){}};this[g](n,null,a)}var a;b.performance&&(a=b.performance.timing);var s=a?new k(a.responseStart):new k;b.jstiming={Timer:k,load:s};if(a){var d=a.navigationStart,f=a.responseStart;0<d&&f>=d&&(b.jstiming.srt=f-d)}if(a){var c=b.jstiming.load;0<d&&f>=d&&(c[g](p,void 0,d),c[g](h,p,f),c[g](l,h))}try{a=null,b[e]&&b[e].csi&&(a=Math.floor(b[e].csi().pageT),
c&&0<d&&(c[g](q,void 0,b[e].csi().startE),c[g](m,q,d))),null==a&&b.gtbExternal&&(a=b.gtbExternal.pageT()),null==a&&b.external&&(a=b.external.pageT,c&&0<d&&(c[g](q,void 0,b.external.startE),c[g](m,q,d))),a&&(b.jstiming.pt=a)}catch(t){}})(); })()
</script>
<link rel="shortcut icon" type="image/x-icon" href="https://www.google.com/images/icons/product/sites-16.ico">
<link rel="apple-touch-icon" href="https://ssl.gstatic.com/sites/p/cc8eeb/system/app/images/apple-touch-icon.png" type="image/png">
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d=window,e="length",h="",k="__duration__",l="function";function m(c){return document.getElementById(c)}d.byId=m;function n(c){return c.replace(/^\s+|\s+$/g,h)}d.trim=n;var p=[],q=0;d.JOT_addListener=function(c,a,b){var f=new String(q++);c={eventName:c,handler:a,compId:b,key:f};p.push(c);return f};d.JOT_removeListenerByKey=function(c){for(var a=0;a<p[e];a++)if(p[a].key==c){p.splice(a,1);break}};d.JOT_removeAllListenersForName=function(c){for(var a=0;a<p[e];a++)p[a].eventName==c&&p.splice(a,1)};
d.JOT_postEvent=function(c,a,b){var f={eventName:c,eventSrc:a||{},payload:b||{}};if(d.JOT_fullyLoaded)for(a=p[e],b=0;b<a&&b<p[e];b++){var g=p[b];g&&g.eventName==c&&(f.listenerCompId=g.compId||h,(g=typeof g.handler==l?g.handler:d[g.handler])&&g(f))}else d.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};d.JOT_delayedEvents=[];d.JOT_fullyLoaded=!1;
d.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var f=0;60<=b&&(b/=60,f=2);2<=b&&f++;return a?d.JOT_siteRelTimeStrs[f].replace(k,Math.floor(b)):d.JOT_userRelTimeStrs[f].replace(k,Math.floor(b))}; })()
</script>
<script>


var webspace = {"scottyUrl":"/_/upload","isConsumer":true,"canPublishScriptToAnyone":true,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"sharingUrlPrefix":"/_/sharing","csiReportUri":"https://gg.google.com/csi","sharingPolicy":"OPENED","siteNoticeUrlEnabled":null,"siteNoticeUrlAddress":null,"analyticsAccountId":"UA-4247088-1","baseUri":"/site/gson","enableUniversalAnalytics":false,"name":"gson","features":{"copySiteProgressUpdates":true,"asyncPermanentDelete":true,"colorsAndFontsFix":true,"docosHideNotificationSettings":true,"driveImageLinkFromOnepick":false,"siteNoticeUrl":true,"asyncPageKeyFix":true,"fileCabinetScreenReaderFix":false,"pdfEmbedSupport":false,"siteMapBottomPaginationButtonsFix":true,"newMyMapsEmbeds":true,"plusBadge":false,"analyticsTrackingForCorp":false,"freebirdFormEmbedDocTypeFix":true,"webspaceUrlScrubOnlyOnBlur":true,"addShortcutToTextBoxDialog":true,"htmlEmbed":true,"newCountDownDialog":true,"pageTreeKeyboardFix":true,"domainAnalyticsInGAOnly":false,"languageSelectDefaultTextSetToDefault":true},"domain":"defaultdomain","adsensePublisherId":null,"gvizVersion":1,"siteTitle":"gson","signInUrl":"https://www.google.com/a/SelectSession?continue\u003dhttps://sites.google.com/site/gson/gson-user-guide\u0026service\u003djotspot","pageSharingId":"jotspot_page","plusPageId":"","onepickBaseUrl":"https://docs.google.com","siteNoticeRevision":null,"termsUrl":"http://sites.google.com/site/sites/system/app/pages/meta/terms","enableAnalytics":true,"isPublic":true,"siteNoticeMessage":null,"plusPageUrl":"","homePath":"/","sharingId":"jotspot","isAdsenseEnabled":true,"adsensePromoClickedOrSiteIneligible":true,"isStartPageEnabled":false,"domainAnalyticsAccountId":""};



webspace.gadgets = {"baseUri":"/site/gson/system/app/pages/gadgets"};


webspace.user = {"uid":"","renderMobile":false,"namespaceUser":false,"sessionIndex":"","primaryEmail":"guest","displayNameOrEmail":"guest","namespace":"","hasAdminAccess":false,"guest_":true,"keyboardShortcuts":true,"hasWriteAccess":false,"domain":"","dasherUser":false,"userName":"guest"};

webspace.page = {"canDeleteWebspace":null,"locale":"zh_CN","state":"","wuid":"wuid:gx:3bff5f9e7fa5ecbb","pageInheritsPermissions":null,"timeZone":"America/Los_Angeles","properties":{},"type":"text","canChangePath":true,"parentWuid":null,"revision":62,"title":"Gson User Guide","isRtlLocale":false,"bidiEnabled":false,"siteLocale":"zh_CN","name":"gson-user-guide","path":"/gson-user-guide","isSiteRtlLocale":false,"parentPath":null};
webspace.page.breadcrumbs = [{"title":"Gson User Guide","dir":"ltr","path":"/site/gson/gson-user-guide","deleted":false}];


webspace.editorResources = {
  text: [
    'https://ssl.gstatic.com/sites/p/cc8eeb/system/js/codemirror.js',
    'https://ssl.gstatic.com/sites/p/cc8eeb/system/app/css/codemirror_css.css',
    'https://ssl.gstatic.com/sites/p/cc8eeb/system/js/trog_edit__zh_cn.js',
    'https://ssl.gstatic.com/sites/p/cc8eeb/system/app/css/trogedit.css',
    '/site/gson/_/rsrc/1416990942000/system/app/css/editor.css',
    'https://ssl.gstatic.com/sites/p/cc8eeb/system/app/css/codeeditor.css',
    '/site/gson/_/rsrc/1416990942000/system/app/css/camelot/editor-jfk.css'
  ],
  sitelayout: [
    'https://ssl.gstatic.com/sites/p/cc8eeb/system/app/css/sitelayouteditor.css'
  ]
};

var JOT_clearDotPath = 'https://ssl.gstatic.com/sites/p/cc8eeb/system/app/images/cleardot.gif';


var JOT_userRelTimeStrs = ["1 \u5206\u949f\u524d","__duration__ \u5206\u949f\u4e4b\u524d","1 \u5c0f\u65f6\u524d","__duration__ \u5c0f\u65f6\u524d"];


webspace.siteTemplateId = false;


webspace.page.currentTemplate = {"title":"\u7f51\u9875","path":"/system/app/pagetemplates/text"};



var JOT_siteRelTimeStrs = ["1 \u5206\u949f\u524d","__duration__ \u5206\u949f\u4e4b\u524d","1 \u5c0f\u65f6\u524d","__duration__ \u5c0f\u65f6\u524d"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="title" content="Gson User Guide - gson">
<meta itemprop="name" content="Gson User Guide - gson">
<meta property="og:title" content="Gson User Guide - gson">
<meta name="description" content="Documentation page for Google Gson">
<meta itemprop="description" content="Documentation page for Google Gson">
<meta id="meta-tag-description" property="og:description" content="Documentation page for Google Gson">
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="Gson%20User%20Guide%20-%20gson_files/standard-css-default-ltr-ltr.css">
<link rel="stylesheet" type="text/css" href="Gson%20User%20Guide%20-%20gson_files/allthemes-view.css">
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/site/gson/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Gson User Guide - gson</title>
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" zh_CN            ">
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything" class="">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="">
<table id="sites-chrome-header" class="sites-layout-hbox" style="" cellspacing="0">
<tbody><tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title" class="" role="banner"><div class="sites-header-cell-buffer-wrapper"><h2><a href="https://sites.google.com/site/gson/" dir="ltr" id="sites-chrome-userheader-title">gson</a></h2></div></td><td class="sites-layout-searchbox "><div class="sites-header-cell-buffer-wrapper"><form id="sites-searchbox-form" action="/site/gson/system/app/pages/search" role="search"><input id="sites-searchbox-scope" name="scope" value="search-site" type="hidden"><input id="jot-ui-searchInput" name="q" size="20" aria-label="搜索此网站" type="text"><div id="sites-searchbox-button-set" class="goog-inline-block"><div role="button" id="sites-searchbox-search-button" class="goog-inline-block jfk-button jfk-button-standard" tabindex="0">搜索此网站</div></div></form></div></td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container" role="navigation">
</td>
</tr>
</tbody></table> 
</div> 
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" border="0" cellpadding="{scmCellpadding}" cellspacing="0">
<tbody><tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left initial" style="width:150px">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_2bd" class="sites-embed" role="navigation"><h4 class="sites-embed-title">导航</h4><div class="sites-embed-content sites-sidebar-nav"><ul role="navigation" jotid="navList"><li class="nav-first "><div dir="ltr" style="padding-left: 5px;"><a href="https://sites.google.com/site/gson/Home" jotid="wuid:gx:39348c59707d97a4" class="sites-navigation-link">Home</a></div></li><li class=""><div class="current-bg" jotid="wuid:gx:3bff5f9e7fa5ecbb" dir="ltr" style="padding-left: 5px;">Gson User Guide</div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://sites.google.com/site/gson/gson-design-document" jotid="wuid:gx:22a601d1dbfdd499" class="sites-navigation-link">Gson Design Document</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://sites.google.com/site/gson/release-process" jotid="wuid:gx:105b93704b46660e" class="sites-navigation-link">Release Process</a></div></li><li class=""><div dir="ltr" style="padding-left: 5px;"><a href="https://sites.google.com/site/gson/system/app/pages/sitemap/hierarchy" jotid="wuid:gx:4b4d36cbfd5c8f48" class="sites-navigation-link">Sitemap</a></div></li></ul></div></div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_30ac" class="sites-embed" role="complementary"><h4 class="sites-embed-title">最近的网站活动</h4><div class="sites-embed-content sites-sidebar-recent-activity"><ul><li><a jotid="wuid:gx:5a8e9d3045d769e8" dir="ltr" href="https://sites.google.com/site/gson/gson-roadmap">Gson RoadMap</a><div><span class="sites-text-secondary">编辑者：Inderjeet Singh</span></div></li><li><a jotid="wuid:gx:2d9ee09c2baffacb" dir="ltr" href="https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2">Using Gson with Maven2</a><div><span class="sites-text-secondary">编辑者：Inderjeet Singh</span></div></li><li><a jotid="wuid:gx:2eb7dd2670d0696f" dir="ltr" href="https://sites.google.com/site/gson/gson-users">Gson Users</a><div><span class="sites-text-secondary">编辑者：Inderjeet Singh</span></div></li><li><a jotid="wuid:gx:5a8e9d3045d769e8" dir="ltr" href="https://sites.google.com/site/gson/gson-roadmap">Gson RoadMap</a><div><span class="sites-text-secondary">编辑者：Inderjeet Singh</span></div></li><li><a jotid="wuid:gx:2d9ee09c2baffacb" dir="ltr" href="https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2">Using Gson with Maven2</a><div><span class="sites-text-secondary">编辑者：Inderjeet Singh</span></div></li><li class="sites-sidebar-recent-activity-viewall"><a href="https://sites.google.com/site/gson/system/app/pages/recentChanges">View All</a></li></ul></div></div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas" role="main">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
</div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr">Gson User Guide</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" class="sites-layout-name-one-column sites-layout-hbox" cellspacing="0"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><p>
<b>Authors: Inderjeet Singh, Joel Leitch, Jesse Wilson</b></p><br><div>
<div class="sites-embed-align-left-wrapping-off"><div class="sites-embed-border-off sites-embed sites-embed-full-width" style="width:100%;"><div class="sites-embed-content sites-embed-type-toc"><div class="goog-toc sites-embed-toc-maxdepth-6"><p>目录</p><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Overview"><strong>1 </strong>Overview</a></li><li class="goog-toc"><a href="#TOC-Goals-for-Gson"><strong>2 </strong>Goals for Gson</a></li><li class="goog-toc"><a href="#TOC-Gson-Performance-and-Scalability"><strong>3 </strong>Gson Performance and Scalability</a></li><li class="goog-toc"><a href="#TOC-Gson-Users"><strong>4 </strong>Gson Users</a></li><li class="goog-toc"><a href="#TOC-Using-Gson"><strong>5 </strong>Using Gson</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Primitives-Examples"><strong>5.1 </strong>Primitives Examples</a></li><li class="goog-toc"><a href="#TOC-Object-Examples"><strong>5.2 </strong>Object Examples</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Finer-Points-with-Objects"><strong>5.2.1 </strong>Finer Points with Objects</a></li></ol></li><li class="goog-toc"><a href="#TOC-Nested-Classes-including-Inner-Classes-"><strong>5.3 </strong>Nested Classes (including Inner Classes)</a></li><li class="goog-toc"><a href="#TOC-Array-Examples"><strong>5.4 </strong>Array Examples</a></li><li class="goog-toc"><a href="#TOC-Collections-Examples"><strong>5.5 </strong>Collections Examples</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Collections-Limitations"><strong>5.5.1 </strong>Collections Limitations</a></li></ol></li><li class="goog-toc"><a href="#TOC-Serializing-and-Deserializing-Generic-Types"><strong>5.6 </strong>Serializing and Deserializing Generic Types</a></li><li class="goog-toc"><a href="#TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types"><strong>5.7 </strong>Serializing and Deserializing Collection with Objects of Arbitrary Types</a></li><li class="goog-toc"><a href="#TOC-Built-in-Serializers-and-Deserializers"><strong>5.8 </strong>Built-in Serializers and Deserializers</a></li><li class="goog-toc"><a href="#TOC-Custom-Serialization-and-Deserialization"><strong>5.9 </strong>Custom Serialization and Deserialization</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Writing-a-Serializer"><strong>5.9.1 </strong>Writing a Serializer</a></li><li class="goog-toc"><a href="#TOC-Writing-a-Deserializer"><strong>5.9.2 </strong>Writing a Deserializer</a></li></ol></li><li class="goog-toc"><a href="#TOC-Writing-an-Instance-Creator"><strong>5.10 </strong>Writing an Instance Creator</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-InstanceCreator-for-a-Parameterized-Type"><strong>5.10.1 </strong>InstanceCreator for a Parameterized Type</a></li></ol></li><li class="goog-toc"><a href="#TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format"><strong>5.11 </strong>Compact Vs. Pretty Printing for JSON Output Format</a></li><li class="goog-toc"><a href="#TOC-Null-Object-Support"><strong>5.12 </strong>Null Object Support</a></li><li class="goog-toc"><a href="#TOC-Versioning-Support"><strong>5.13 </strong>Versioning Support</a></li><li class="goog-toc"><a href="#TOC-Excluding-Fields-From-Serialization-and-Deserialization"><strong>5.14 </strong>Excluding Fields From Serialization and Deserialization</a><ol class="goog-toc"><li class="goog-toc"><a href="#TOC-Java-Modifier-Exclusion"><strong>5.14.1 </strong>Java Modifier Exclusion</a></li><li class="goog-toc"><a href="#TOC-Gson-s-Expose"><strong>5.14.2 </strong>Gson's @Expose</a></li><li class="goog-toc"><a href="#TOC-User-Defined-Exclusion-Strategies"><strong>5.14.3 </strong>User Defined Exclusion Strategies</a></li></ol></li><li class="goog-toc"><a href="#TOC-JSON-Field-Naming-Support"><strong>5.15 </strong>JSON Field Naming Support</a></li><li class="goog-toc"><a href="#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers"><strong>5.16 </strong>Sharing State Across Custom Serializers and Deserializers</a></li><li class="goog-toc"><a href="#TOC-Streaming"><strong>5.17 </strong>Streaming</a></li></ol></li><li class="goog-toc"><a href="#TOC-Issues-in-Designing-Gson"><strong>6 </strong>Issues in Designing Gson</a></li><li class="goog-toc"><a href="#TOC-Future-Enhancements-to-Gson"><strong>7 </strong>Future Enhancements to Gson</a></li></ol></div></div></div></div>
<br><div><h2><a name="TOC-Overview"></a>Overview</h2>Gson
is a Java library that can be used to convert Java Objects into their
JSON representation. It can also be used to convert a JSON string to an
equivalent Java object. Gson is an open-source project hosted at <a href="http://code.google.com/p/google-gson" title="http://code.google.com/p/google-gson">http://code.google.com/p/google-gson</a>.<br><br>Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.<br><br><h2><a name="TOC-Goals-for-Gson"></a>Goals for Gson</h2><ul><li>Provide easy to use mechanisms like <span style="font-family:courier new,monospace">toString()</span> and constructor (factory method) to convert Java to JSON and vice-versa</li><li>Allow pre-existing unmodifiable objects to be converted to and from JSON</li><li>Allow custom representations for objects</li><li>Support arbitrarily complex object</li><li>Generate compact and readability JSON output<br></li></ul><h2><a name="TOC-Gson-Performance-and-Scalability"></a>Gson Performance and Scalability<br></h2>
Here are some metrics that we obtained on a desktop (dual opteron, 8GB 
RAM, 64-bit Ubuntu) running lots of other things along-with the tests. 
You can rerun these tests by using the class <a href="http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java">PerformanceTest</a>.<br><ul><li>Strings: Deserialized strings of over 25MB without any problems (see <span style="font-family:courier new,monospace">disabled_testStringDeserializationPerformance</span> method in <span style="font-family:courier new,monospace">PerformanceTest</span>)<br></li><li>Large collections: <br></li><ul><li>Serialized a collection of 1.4 million objects (see <span style="font-family:courier new,monospace">disabled_testLargeCollectionSerialization</span> method in <span style="font-family:courier new,monospace">PerformanceTest</span>)<br></li><li>Deserialized a collection of 87,000 objects (see <span style="font-family:courier new,monospace">disabled_testLargeCollectionDeserialization</span> in <span style="font-family:courier new,monospace">PerformanceTest</span>)</li></ul><li>Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.</li></ul>Note: Delete the <span style="font-family:courier new,monospace">disabled_</span> prefix to run these tests. We use this prefix to prevent running these tests every time we run junit tests.<br><h2><a name="TOC-Gson-Users"></a>Gson Users</h2><p>Gson
 was originally created for use inside Google where it is currently used
 in a number of projects. It is now used by a number of public projects 
and companies. See details <a href="https://sites.google.com/site/gson/gson-users">here</a>.</p><h2><a name="TOC-Using-Gson"></a>Using Gson</h2>The
primary class to use is <a href="http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/Gson.java" title="Gson">Gson</a> which you can just create by calling new
Gson(). There is also a class <a href="http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/GsonBuilder.java" title="GsonBuilder">GsonBuilder</a> available that can be used to create a Gson instance with various settings like version control and so on. <br><br>The Gson instance does not maintain any state while
invoking Json operations. So, you are free to reuse the same object for
multiple Json serialization and deserialization operations.<br><h3><a name="TOC-Primitives-Examples"></a>Primitives Examples</h3><span style="font-family:courier new,monospace"><span style="font-family:arial,sans-serif">(Serialization)</span><br style="font-family:arial,sans-serif">Gson gson = new Gson();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.toJson(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-family:courier new,monospace"><b><span style="font-family:arial,sans-serif">==&gt; prints 1</span></b><br></span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.toJson("abcd");&nbsp;&nbsp; &nbsp; &nbsp; <b><span style="font-family:arial,sans-serif">==&gt; prints "abcd"</span></b><br></span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.toJson(new Long(10)); <b><span style="font-family:arial,sans-serif">==&gt; prints 10</span></b><br>int[] values = { 1 };<br></span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.toJson(values);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><span style="font-family:arial,sans-serif">==&gt; prints [1]</span></b><br><br><span style="font-family:arial,sans-serif">(Deserialization)</span><br style="font-family:arial,sans-serif">int one = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.fromJson(</span><span style="font-family:courier new,monospace">"1", </span><span style="font-family:courier new,monospace">int.class);<br>Integer one = gson.fromJson("1", Integer.class);<br></span><span style="font-family:courier new,monospace">Long one = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.fromJson(</span><span style="font-family:courier new,monospace">"1", </span><span style="font-family:courier new,monospace">Long.class);<br>Boolean false = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.fromJson(</span><span style="font-family:courier new,monospace">"false", </span><span style="font-family:courier new,monospace">Boolean.class);<br>String str = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.fromJson(</span><span style="font-family:courier new,monospace">"\"abc\""</span><span style="font-family:courier new,monospace">, </span><span style="font-family:courier new,monospace">String.class);<br></span><span style="font-family:courier new,monospace">String anotherStr = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.fromJson(</span><span style="font-family:courier new,monospace">"[\"abc\"]"</span><span style="font-family:courier new,monospace">, </span><span style="font-family:courier new,monospace">String.class);<br></span><br><h3><a name="TOC-Object-Examples"></a>Object Examples</h3><span style="font-family:courier new,monospace">class BagOfPrimitives {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; private int value1 = 1;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; private String value2 = "abc";<br>&nbsp; private <i>transient</i> int value3 = 3;<br>&nbsp; BagOfPrimitives() {<br>&nbsp;&nbsp;&nbsp; // no-args constructor<br>&nbsp; }<br style="font-family:courier new,monospace"></span><span style="font-family:courier new,monospace">}<br><br></span><span style="font-family:courier new,monospace"><span style="font-family:arial,sans-serif">(Serialization)</span><br style="font-family:arial,sans-serif"></span><span style="font-family:courier new,monospace">BagOfPrimitives obj = new BagOfPrimitives();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">Gson</span> <span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace"> = new </span><span style="font-family:courier new,monospace">Gson</span><span style="font-family:courier new,monospace">();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">String json = gson.toJson(obj);&nbsp; </span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace"><span style="font-family:arial,sans-serif"><b>==&gt; json is {"value1":1,"value2":"abc"}</b><br><br></span></span>Note that you can not serialize objects with circular references since that will result in infinite recursion<span style="font-family:courier new,monospace">. <br><span style="font-family:arial,sans-serif"><br>(Deserialization)</span><br>BagOfPrimitives obj2 = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.fromJson(json, </span><span style="font-family:courier new,monospace">BagOfPrimitives.class</span><span style="font-family:courier new,monospace">);<span style="font-family:arial,sans-serif">&nbsp;&nbsp; <br><b>==&gt; obj2 is just like obj</b><br><br></span></span><div><h4><a name="TOC-Finer-Points-with-Objects"></a><b>Finer Points with Objects</b></h4></div>
<ul style="margin-left:1.5em"><li>It is perfectly fine (and recommended) to use private fields <br></li><li>There
is no need to use any annotations to indicate a field is to be included
for serialization and deserialization. All fields in the current class
(and from all super classes) are included by default. <br></li><li>If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.<br></li><li>This implementation handles nulls correctly</li><ul style="margin-left:1.5em"><li>While serialization, a null field is skipped from the output</li><li>While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null<br></li></ul><li>If a field is <i>synthetic</i>, it is ignored and not included in JSON serialization or deserialization<br></li><li>Fields
corresponding to the outer classes in&nbsp; inner classes, anonymous
classes, and local classes are ignored and not included in
serialization or deserialization</li></ul>
<h3><a name="TOC-Nested-Classes-including-Inner-Classes-"></a>Nested Classes (including Inner Classes)<br></h3><div>Gson can serialize static nested classes quite easily.&nbsp;</div><div><br></div><div>Gson can also deserialize static nested classes. However, Gson can <b>not </b>automatically deserialize the <b>pure inner classes since their no-args constructor also need a reference to the containing Object</b>
 which is not available at the time of deserialization. You can address 
this problem by either making the inner class static or by providing a 
custom InstanceCreator for it. Here is an example:&nbsp;</div><font face="'courier new', monospace"><br><br>public class A { <br>&nbsp;&nbsp;public String a; <br><br>&nbsp;&nbsp;class B { <br><br>&nbsp;&nbsp; &nbsp;public String b; <br><br>&nbsp;&nbsp; &nbsp;public B() {<br>&nbsp;&nbsp; &nbsp; &nbsp;// No args constructor for B<br>&nbsp;&nbsp; &nbsp;}<br>&nbsp;&nbsp;} <br>}</font></div><div><font face="'courier new'"><br></font></div><div><font face="'courier new'"><font face="arial, sans-serif"><b>NOTE</b>: The above class B can not (by default) be serialized with Gson.<br><br>G</font><font face="arial, sans-serif">s</font><font face="arial, sans-serif">o</font><font face="arial, sans-serif">n</font><font face="arial, sans-serif">&nbsp;</font><font face="arial, sans-serif">c</font><font face="arial, sans-serif">a</font><font face="arial, sans-serif">n</font><font face="arial, sans-serif">&nbsp;</font><font face="arial, sans-serif">n</font><font face="arial, sans-serif">o</font><font face="arial, sans-serif">t</font><font face="arial, sans-serif">&nbsp;</font><font face="arial, sans-serif">d</font><font face="arial, sans-serif">e</font><font face="arial, sans-serif">serialize </font><font face="'courier new', monospace">{"b":"abc"}</font><font face="arial, sans-serif"> into an instance of B since the class B is an inner class. if it was defined as </font><font face="'courier new', monospace">static class B</font><font face="arial, sans-serif"> then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B.&nbsp;</font></font></div><div><br></div><div><font face="'courier new', monospace">public class InstanceCreatorForB implements InstanceCreator&lt;A.B&gt; {</font></div><div><font face="'courier new'">&nbsp;&nbsp;private final A a;</font></div><div><font face="'courier new', monospace">&nbsp;&nbsp;public InstanceCreatorForB(A a) &nbsp;{</font></div><div><font face="'courier new', monospace">&nbsp;&nbsp; &nbsp;this.a = a;</font></div><div><font face="'courier new', monospace">&nbsp;&nbsp;}</font></div><div><font face="'courier new', monospace">&nbsp;&nbsp;public A.B createInstance(Type type) {</font></div><div><font face="'courier new', monospace">&nbsp;&nbsp; &nbsp;return a.new B();</font></div><div><font face="'courier new', monospace">&nbsp;&nbsp;}</font></div><div><font face="'courier new', monospace">}</font></div><div>&nbsp;</div><div><font face="'courier new'"><font face="arial">The above is possible, but not recommended.<br><br></font></font><h3><a name="TOC-Array-Examples"></a><span style="font-family:courier new,monospace"><span style="font-family:arial,sans-serif">Array Examples</span></span></h3><div><span style="font-family:courier new,monospace">Gson</span> <span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace"> = new </span><span style="font-family:courier new,monospace">Gson</span><span style="font-family:courier new,monospace">();<br></span><span style="font-family:courier new,monospace">int[] ints = {1, 2, 3, 4, 5};<br></span><span style="font-family:courier new,monospace">String[] strings = {"abc", "def", "ghi"};<br><br></span><span style="font-family:courier new,monospace"><font face="arial,sans-serif">(Serialization)</font></span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.toJson(ints);&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-family:courier new,monospace"><b><span style="font-family:arial,sans-serif">==&gt; prints [1,2,3,4,5]</span></b></span><span style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"></span></div><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.toJson(strings);&nbsp; <b><span style="font-family:arial,sans-serif">==&gt; prints ["abc", "def", "ghi"]</span></b><br style="font-family:arial,sans-serif"><br><span style="font-family:arial,sans-serif">(Deserialization)</span><br style="font-family:arial,sans-serif">int[] ints2 = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.fromJson("[1,2,3,4,5]", </span><span style="font-family:courier new,monospace">int[].class</span><span style="font-family:courier new,monospace">); <br><b><span style="font-family:arial,sans-serif">==&gt; ints2 will be same as ints</span></b><br style="font-family:arial,sans-serif"></span><br><span style="font-family:courier new,monospace"><span style="font-family:arial,sans-serif">We also support multi-dimensional arrays, with arbitrarily complex element types<br><br></span></span><h3><a name="TOC-Collections-Examples"></a><span style="font-family:courier new,monospace"><span style="font-family:arial,sans-serif">Collections Examples</span></span></h3><span style="font-family:courier new,monospace">Gson</span> <span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace"> = new G</span><span style="font-family:courier new,monospace">son</span><span style="font-family:courier new,monospace">();</span><br><span style="font-family:courier new,monospace">Collection&lt;Integer&gt; ints = Lists.immutableList(1,2,3,4,5);<br><br></span>(Serialization)<span style="font-family:courier new,monospace"><br>String json = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.toJson(ints);</span><span style="font-family:courier new,monospace"><span style="font-family:arial,sans-serif"> <b>==&gt; json is [1,2,3,4,5]</b></span><br></span><span style="font-family:courier new,monospace"><span style="font-family:arial,sans-serif"><br>(Deserialization)</span><br style="font-family:arial,sans-serif">Type collectionType = new TypeToken&lt;Collection&lt;Integer&gt;&gt;(){}.getType();<br>Collection&lt;Integer&gt; ints2 = </span><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.fromJson(json, collectionType);<br><font face="arial,sans-serif">ints2 is same as ints<br><br>Fairly hideous: note how we define the type of collection<br>Unfortunately, no way to get around this in Java</font></span><br><br><h4><a name="TOC-Collections-Limitations"></a><b>Collections Limitations</b></h4><ul><li>Can serialize collection of arbitrary objects but can not deserialize from it</li><ul><li>Because there is no way for the user to indicate the type of the resulting object</li></ul><li>While deserializing, Collection must be of a specific generic type</li></ul>All of this makes sense, and is rarely a problem when following good Java coding practices<br><br><h3><a name="TOC-Serializing-and-Deserializing-Generic-Types"></a>Serializing and Deserializing Generic Types</h3>When you call <span style="font-family:courier new,monospace">toJson(obj)</span>, Gson calls <span style="font-family:courier new,monospace">obj.getClass()</span> to get information on the fields to serialize. Similarly, you can typically pass <span style="font-family:courier new,monospace">MyClass.class</span> object in the <span style="font-family:courier new,monospace">fromJson(json, MyClass.class)</span>
 method. This works fine if the object is a non-generic type. However, 
if the object is of a generic type, then the Generic type information is
 lost because of Java Type Erasure. Here is an example illustrating the 
point: <br><br><span style="font-family:courier new,monospace">class Foo&lt;T&gt; {</span></div><div><span style="font-family:courier new,monospace">&nbsp; T value;</span></div><div><span style="font-family:courier new,monospace">}</span></div><div><span style="font-family:courier new,monospace">Gson gson = new Gson();</span></div><div><span style="font-family:courier new,monospace">Foo&lt;Bar&gt; foo = new Foo&lt;Bar&gt;();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">gson.toJson(foo); // May not serialize foo.value correctly</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar</span><br><br>The above code fails to interpret value as type Bar because Gson invokes <span style="font-family:courier new,monospace">list.getClass()</span> to get its class information, but this method returns a raw class, <span style="font-family:courier new,monospace">Foo.class</span>. This means that Gson has no way of knowing that this is an object of type Foo&lt;Bar&gt;, and not just plain Foo. <br><br>You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the <a href="http://google-gson.googlecode.com/svn/tags/1.1.1/docs/javadocs/com/google/gson/reflect/TypeToken.html"><span style="font-family:courier new,monospace">TypeToken</span></a> class. <br><span style="font-family:courier new,monospace">Type fooType = new TypeToken&lt;Foo&lt;Bar&gt;&gt;() {}.getType();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">gson.toJson(foo, fooType);</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">gson.fromJson(json, fooType);</span><br><br>The idiom used to get <span style="font-family:courier new,monospace">fooType&nbsp;</span>actually defines an anonymous local inner class containing a method <span style="font-family:courier new,monospace">getType()</span> that returns the fully parameterized type.&nbsp;</div><div><h3><a name="TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types"></a>Serializing and Deserializing Collection with Objects of Arbitrary Types</h3><div>Sometimes you are dealing with JSON array that contains mixed types. For example:</div><div><code>['hello',5,{name:'GREETINGS',source:'guest'}]</code></div><div><br></div><div>The equivalent Collection containing this is:</div><div><code>Collection collection = new ArrayList();</code></div><div><code>collection.add("hello");</code></div><div><code>collection.add(5);</code></div><div><code>collection.add(new Event("GREETINGS", "guest"));</code></div><div>Where the Event class is defined as:</div><div><font face="arial, sans-serif"><code>class Event {</code></font></div><div><font face="arial, sans-serif"><code>&nbsp; private String name;</code></font></div><div><font face="arial, sans-serif"><code>&nbsp; private String source;</code></font></div><div><font face="arial, sans-serif"><code>&nbsp; private Event(String name, String source) {</code></font></div><div><font face="arial, sans-serif"><code>&nbsp; &nbsp; this.name = name;</code></font></div><div><font face="arial, sans-serif"><code>&nbsp; &nbsp; this.source = source;</code></font></div><div><font face="arial, sans-serif"><code>&nbsp; }</code></font></div><div><font face="arial, sans-serif"><code>}</code></font></div><div><br></div><div>You can serialize the collection with Gson without doing anything specific: <code>toJson(collection)</code> would write out the desired output.</div><div>However, deserialization with <code>fromJson(json, Collection.class)</code>
 will not work since Gson has no way of knowing how to map the input to 
the types. Gson requires that you provide a genericised version of 
collection type in fromJson. So, you have three options:</div><div><br></div><div><b>Option 1</b>:&nbsp;Use
 Gson's parser API (low-level streaming parser or the DOM parser 
JsonParser) to parse the array elements and then &nbsp;use 
Gson.fromJson() on each of the array elements.This is the preferred 
approach. <a href="http://code.google.com/p/google-gson/source/browse/trunk/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java" target="_blank">Here is an example</a> that demonstrates how to do this.</div><div><br></div><div><b>Option 2:&nbsp;</b>Register
 a type adapter for Collection.class that looks at each of the array 
members and maps them to appropriate objects. The disadvantage of this 
approach is that it will screw up deserialization of other collection 
types in Gson.</div><div><br></div><div><b>Option 3</b>: Register a type adapter for MyCollectionMemberType and use fromJson with Collection&lt;MyCollectionMemberType&gt;</div><div>This
 approach is practical only if the array appears as a top-level element 
or if you can change the field type holding the collection to be of type
 Collection&lt;MyCollectionMemberTyep&gt;.&nbsp;</div><h3><a name="TOC-Built-in-Serializers-and-Deserializers"></a>Built-in Serializers and Deserializers<br></h3>Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate. <br>Here is a list of such classes: <br><ol><li>java.net.URL to match it with strings like "http://code.google.com/p/google-gson/".</li><li>java.net.URI to match it with strings like "/p/google-gson/".</li></ol>You can also find source-code for some commonly used classes such as JodaTime at <a href="https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1">this page</a>.<br><h3><a name="TOC-Custom-Serialization-and-Deserialization"></a>Custom Serialization and Deserialization</h3>Sometimes
default representation is not what you want. This is often the case
when dealing with library classes (DateTime, etc). <br>Gson allows you to register your own custom serializers and deserializers. This is done by defining two parts: <br><ul style="margin-left:1.5em"><li>Json Serialiers: Need to define custom serialization for an object</li><li>Json Deserializers: Needed to define custom deserialization for a type<br></li><li>Instance Creators: Not needed if no-args constructor is available or a deserializer is registered<br></li></ul><span style="font-family:courier new,monospace">GsonBuilder gson = new GsonBuilder();<br></span><span style="font-family:courier new,monospace">gson.registerTypeAdapter(MyType2.class,
 new MyTypeAdapter());</span><br>
<span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.registerTypeAdapter(MyType.class, new MySerializer());</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.registerTypeAdapter(MyType.class, new MyDeserializer());</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">gson</span><span style="font-family:courier new,monospace">.registerTypeAdapter(MyType.class, new MyInstanceCreator());<br></span><br>registerTypeAdapter
 call checks if the type adapter implements more than one of these 
interfaces and register it for all of them.<br><h4><a name="TOC-Writing-a-Serializer"></a>Writing a Serializer</h4>Here is an example of how to write a custom serializer for JodaTime DateTime class. <br><br><span style="font-family:courier new,monospace">private class DateTimeSerializer implements JsonSerializer&lt;DateTime&gt; {<br></span><span style="font-family:courier new,monospace">&nbsp; public JsonElement serialize(DateTime src, Type typeOfSrc, JsonSerializationContext context) {<br>&nbsp;&nbsp; &nbsp;return new JsonPrimitive(src.toString());<br>&nbsp; }<br>}<br></span><br><font face="arial,sans-serif">Gson calls toJson() when it runs into a DateTime</font> object during serialization.<br><h4><a name="TOC-Writing-a-Deserializer"></a>Writing a Deserializer</h4>Here is an example of how to write a custom deserializer for JodaTime DateTime class. <br><br><span style="font-family:courier new,monospace">private class DateTimeDeserializer implements JsonDeserializer&lt;DateTime&gt; {</span><span style="font-family:courier new,monospace"><br>&nbsp; public </span><span style="font-family:courier new,monospace">DateTime</span><span style="font-family:courier new,monospace"> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws JsonParseException {<br>&nbsp;&nbsp;&nbsp; return new DateTime(json.getAsJsonPrimitive().getAsString());<br>&nbsp; }<br>}<br></span><br>Gson calls fromJson() when it needs to deserialize a JSON string fragment into a DateTime object<br><br><br><b>Finer points with Serializers and Deserializers</b><br><br>Often you want to register a single handler for all generic types corresponding to a raw type<ul><li>For example, suppose you have an "Id" class for Id representation/translation (i.e. an internal vs. external representation).</li><li>Id&lt;T&gt; type that has same serialization for all generic types <br></li><ul><li>Essentially write out the id value</li></ul><li><p>Deserialization is very similar but not exactly the same</p></li><ul><li>Need to call <span style="font-family:courier new,monospace">"new Id(Class&lt;T&gt;, String)"</span> which returns an instance of Id&lt;T&gt;<br></li></ul></ul>Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say <span style="font-family:courier new,monospace">Id&lt;RequiresSpecialHandling&gt;</span> needed special handling).<br>The <span style="font-family:courier new,monospace">Type</span> parameter for the <span style="font-family:courier new,monospace">toJson</span> and <span style="font-family:courier new,monospace">fromJson</span>
contains the generic type information to help you write a single
handler for all generic types corresponding to the same raw type<h3><a name="TOC-Writing-an-Instance-Creator"></a>Writing an Instance Creator</h3>While deserializing an Object, Gson needs to create a default instance of the class<br>Well-behaved&nbsp; classes that are meant for serialization and deserialization should have a no-argument constructor<ul style="margin-left:1.5em"><li>Doesn't matter whether public or private<br></li></ul>Typically, Instance Creators are needed when you are dealing with a library class that does NOT define a no-argument constructor<br><br><b><br>Instance Creator Example</b><br><br><span style="font-family:courier new,monospace">private class MoneyInstanceCreator implements InstanceCreator&lt;Money&gt; {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; public Money createInstance(Type type) {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; return new Money("1000000", CurrencyCode.USD);</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; }</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">}</span><br style="font-family:courier new,monospace"><br>Type could be of a corresponding generic type<ul style="margin-left:1.5em"><li>Very useful to invoke constructors which need specific generic type information</li><li>For example, if the <span style="font-family:courier new,monospace">Id</span> class stores the class for which the Id is being created</li></ul><h4><a name="TOC-InstanceCreator-for-a-Parameterized-Type"></a>InstanceCreator for a Parameterized Type</h4>Sometimes
 that the type that you are trying to instantiate is a parameterized 
type. Generally, this is not a problem since the actual instance is of 
raw type. Here is an example: <br><br><span style="font-family:courier new,monospace">class MyList&lt;T&gt; extends ArrayList&lt;T&gt; {<br>}<br><br>class MyListInstanceCreator implements InstanceCreator&lt;MyList&lt;?&gt;&gt; {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; @SuppressWarnings("unchecked")</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; public MyList&lt;?&gt; createInstance(Type type) {</span><br><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; // No need to use a parameterized list since the actual instance will have the raw type anyway.</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; return new MyList();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; }</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">}</span><br style="font-family:courier new,monospace"><br>However,
 sometimes you do need to create instance based on the actual 
parameterized type. In this case, you can use the type parameter being 
passed to the <span style="font-family:courier new,monospace">createInstance</span> method. Here is an example: <br><br><span style="font-family:courier new,monospace">public class Id&lt;T&gt; {<br>&nbsp; private final Class&lt;T&gt; classOfId;<br>&nbsp; private final long value;<br>&nbsp; public Id(Class&lt;T&gt; classOfId, long value) {<br>&nbsp;&nbsp;&nbsp; this.classOfId = classOfId;<br>&nbsp;&nbsp;&nbsp; this.value = value;<br>&nbsp; }<br>}<br><br>class IdInstanceCreator implements InstanceCreator&lt;Id&lt;?&gt;&gt; {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; public Id&lt;?&gt; createInstance(Type type) {</span><span style="font-family:courier new,monospace"><br>&nbsp;&nbsp;&nbsp; Type[] typeParameters = ((ParameterizedType)type).getActualTypeArguments();<br>&nbsp;&nbsp;&nbsp; Type idType = typeParameters[0]; // Id has only one parameterized type T<br>&nbsp;&nbsp;&nbsp; return Id.get((Class)idType, 0L);<br></span><span style="font-family:courier new,monospace">&nbsp; }</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">}</span><br><br>In
 the above example, an instance of the Id class can not be created 
without actually passing in the actual type for the parameterized type. 
We solve this problem by using the passed method parameter,<span style="font-family:courier new,monospace"> type</span>. The <span style="font-family:courier new,monospace">type</span> object in this case is the Java parameterized type representation of <span style="font-family:courier new,monospace">Id&lt;Foo&gt;</span> where the actual instance should be bound to<span style="font-family:courier new,monospace"> Id&lt;Foo&gt;</span>. Since <span style="font-family:courier new,monospace">Id</span> class has just one parameterized type parameter, <span style="font-family:courier new,monospace">T</span>, we use the zeroth element of the type array returned by <span style="font-family:courier new,monospace">getActualTypeArgument()</span> which will hold <span style="font-family:courier new,monospace">Foo.class</span> in this case.<br style="font-family:courier new,monospace"><br><h3><a name="TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format"></a>Compact Vs. Pretty Printing for JSON Output Format</h3>The
 default JSON output that is provide by Gson is a compact JSON 
format.&nbsp; This means that there will not be any whitespace in the 
output JSON structure.&nbsp; Therefore, there will be no whitespace 
between field names and its value, object fields, and objects within 
arrays in the JSON output.&nbsp; As well, "null" fields will be ignored 
in the output (NOTE: null values will still be included in 
collections/arrays of objects).&nbsp; See the <a href="https://sites.google.com/site/gson/gson-user-guide#TOC-Null-Object-Support">Null Object Support</a> section for information on configure Gson to output all null values.<br><br>If you like to use the Pretty Print feature, you must configure your <span style="font-family:courier new,monospace">Gson</span> instance using the <span style="font-family:courier new,monospace">GsonBuilder</span>.&nbsp; The <span style="font-family:courier new,monospace">JsonFormatter</span>&nbsp;
 is not exposed through our public API, so the client is unable to 
configure the default print settings/margins for the JSON output.&nbsp; 
For now, we only provide a default <span style="font-family:courier new,monospace">JsonPrintFormatter</span> that has default line length of 80 character, 2 character indentation, and 4 character right margin.<br><br>The following is an example shows how to configure a <span style="font-family:courier new,monospace">Gson</span> instance to use the default <span style="font-family:courier new,monospace">JsonPrintFormatter</span> instead of the <span style="font-family:courier new,monospace">JsonCompactFormatter</span>:<br><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">Gson gson = new GsonBuilder().setPrettyPrinting().create();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">String jsonOutput = gson.toJson(someObject);</span><br><br><br><h3><a name="TOC-Null-Object-Support"></a>Null Object Support</h3>The default behaviour that is implemented in Gson is that <span style="font-family:courier new,monospace">null</span>
 object fields are ignored.&nbsp; This allows for a more compact output 
format; however, the client must define a default value for these fields
 as the JSON format is converted back into its Java.<br><br>Here's how you would configure a <span style="font-family:courier new,monospace">Gson</span> instance to output null:<br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">Gson gson = new GsonBuilder().serializeNulls().create();</span><br style="font-family:courier new,monospace"><br>NOTE: when serializing <span style="font-family:courier new,monospace">null</span>s with Gson, it will add a <span style="font-family:courier new,monospace">JsonNull</span> element to the <span style="font-family:courier new,monospace">JsonElement</span> structure.&nbsp; Therefore, this object can be used in custom serialization/deserialization.<br><br>Here's an example:<br><br><span style="font-family:courier new,monospace">public class Foo {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; private final String s;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; private final int i;</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; public Foo() {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; this(null, 5);</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; }</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; public Foo(String s, int i) {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; this.s = s;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; this.i = i;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; }</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">}</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">Gson gson = new GsonBuilder().serializeNulls().create();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">Foo foo = new Foo();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">String json = gson.toJson(foo);</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">System.out.println(json);</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">json = gson.toJson(null);</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">System.out.println(json);</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">======== OUTPUT ========</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">{"s":null,"i":5}</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">null</span><br><br><h3><a name="TOC-Versioning-Support"></a>Versioning Support</h3>Multiple
versions of the same object can be maintained by using <a href="http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/annotations/Since.java" title="@Since">@Since</a> 
annotation. This annotation can be used on Classes, Fields and, in
a future release, Methods.&nbsp; In order to leverage this feature, you must configure your <span style="font-family:courier new,monospace">Gson</span> instance to ignore any field/object that is greater than some version number.&nbsp; If no version is set on the <span style="font-family:courier new,monospace">Gson</span> instance then it will serialize and deserialize all fields and classes regardless of the version.<br><br><span style="font-family:courier new,monospace">public class VersionedClass {<br>&nbsp; @Since(1.1) private final String newerField;<br>&nbsp; </span><span style="font-family:courier new,monospace">@Since(1.0) </span><span style="font-family:courier new,monospace">private final String newField;<br>&nbsp; private final String field;<br><br>&nbsp; public VersionedClass() {<br>&nbsp;&nbsp;&nbsp; this.newerField = "newer";<br>&nbsp;&nbsp;&nbsp; this.newField = "new";<br>&nbsp;&nbsp;&nbsp; this.field = "old";<br>&nbsp; }<br>}<br><br>VersionedClass versionedObject = new VersionedClass();<br>Gson gson = new GsonBuilder().setVersion(1.0).create();</span><br style="font-family:courier new,monospace">
<span style="font-family:courier new,monospace">String jsonOutput = gson.toJson(someObject);<br>System.out.println(jsonOutput);<br></span><span style="font-family:courier new,monospace">System.out.println();<br><br></span><span style="font-family:courier new,monospace">gson = new Gson();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">jsonOutput = gson.toJson(someObject);<br>
System.out.println(jsonOutput);</span><br><span style="font-family:courier new,monospace"><br></span><span style="font-family:courier new,monospace">======== OUTPUT ========</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">{"newField":"new","field":"old"}<br></span><br style="font-family:courier new,monospace">
<span style="font-family:courier new,monospace">{</span><span style="font-family:courier new,monospace">"newerField":"newer",</span><span style="font-family:courier new,monospace">"newField":"new","field":"old"}</span><br><br><h3><a name="TOC-Excluding-Fields-From-Serialization-and-Deserialization"></a>Excluding Fields From Serialization and Deserialization</h3><p><span style="font-weight:normal">Gson</span>
 supports numerous mechanisms for excluding top-level classes, fields 
and field types.&nbsp; Below are pluggable mechanism that allow field 
and class exclusion. If none of the below mechanism satisfy your needs 
then you can always use <a href="https://sites.google.com/site/gson/gson-user-guide#TOC-Custom-Serialization-and-Deserializ">custom serializers and deserializers</a>.<br></p><h4><a name="TOC-Java-Modifier-Exclusion"></a>Java Modifier Exclusion</h4>By default, if you mark a field as <span style="font-family:courier new,monospace">transient</span>,
 it will be excluded.&nbsp; As well, if a field is marked as "static" 
then by default it will be excluded. If you want to include some 
transient fields then you can do the following:<br><br><span style="font-family:courier new,monospace">import java.lang.reflect.Modifier;<br><br></span><span style="font-family:courier new,monospace">Gson gson = new GsonBuilder()<br>&nbsp;&nbsp;&nbsp; .excludeFieldsWithModifiers(Modifier.STATIC)<br>&nbsp;&nbsp;&nbsp; .create();</span><br><br>NOTE: you can use any number of the <span style="font-family:courier new,monospace">Modifier</span> constants to "<span style="font-family:courier new,monospace">excludeFieldsWithModifiers</span>" method.&nbsp; For example:<br><span style="font-family:courier new,monospace">Gson gson = new GsonBuilder()<br>
&nbsp;&nbsp;&nbsp; .excludeFieldsWithModifiers(Modifier.STATIC, Modifier.TRANSIENT, Modifier.VOLATILE)<br>
&nbsp;&nbsp;&nbsp; .create();</span><br><h4><a name="TOC-Gson-s-Expose"></a>Gson's @Expose<br></h4>This
  feature provides a way where you can mark certain fields of your 
objects to be excluded for consideration for serialization and 
deserialization to JSON. To use this annotation, you must create Gson by
 using <span style="font-family:courier new,monospace">new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()</span>. The Gson instance created will exclude all fields in a class that are not marked with <span style="font-family:courier new,monospace">@Expose</span> annotation.</div><br><h4><a name="TOC-User-Defined-Exclusion-Strategies"></a>User Defined Exclusion Strategies<br></h4>If
 the above mechanisms for excluding fields and class type do not work 
for you then you can always write your own exclusion strategy and plug 
it into Gson. See the <a href="http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/ExclusionStrategy.html"><span style="font-family:courier new,monospace">ExclusionStrategy</span></a> JavaDoc for more information.<br><br>The
 following example shows how to exclude fields marked with a specific 
"@Foo" annotation and excludes top-level types (or declared field type) 
of class String.<br><span style="font-family:courier new,monospace">&nbsp; @Retention(RetentionPolicy.RUNTIME)</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; @Target({ElementType.FIELD})</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; public @interface Foo {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; // Field tag only annotation</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; }</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; </span><span style="font-family:courier new,monospace">public class SampleObjectForTest {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; @Foo </span><span style="font-family:courier new,monospace">private final int annotatedField;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; private final String stringField;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; private final long longField;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; private final Class&lt;?&gt; clazzField;</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; public SampleObjectForTest() {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; annotatedField = 5;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stringField = "someDefaultValue";</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; longField = 1234;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; }</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; }</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; public class MyExclusionStrategy implements ExclusionStrategy {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; private final Class&lt;?&gt; typeToSkip;</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; private MyExclusionStrategy(Class&lt;?&gt; typeToSkip) {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.typeToSkip = typeToSkip;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; }</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; public boolean shouldSkipClass(Class&lt;?&gt; clazz) {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (clazz == typeToSkip);</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; }</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; public boolean shouldSkipField(FieldAttributes f) {</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return f.getAnnotation(Foo.class) != null;</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp;&nbsp;&nbsp; }</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; }</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">&nbsp; public static void main(String[] args) {<br>&nbsp;&nbsp;&nbsp; Gson gson = new GsonBuilder()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .setExclusionStrategies(new MyExclusionStrategy(String.class))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .serializeNulls()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .create();<br>&nbsp;&nbsp;&nbsp; </span><span style="font-family:courier new,monospace">SampleObjectForTest </span><span style="font-family:courier new,monospace">src = new SampleObjectForTest();<br><span>&nbsp;&nbsp;&nbsp; String json = gson.toJson(src);<br>&nbsp;&nbsp;&nbsp; System.out.println(json);<br></span>&nbsp; }<br><br></span><span style="font-family:courier new,monospace">======== OUTPUT ========</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">{"longField":1234}<br><br></span><div><h3><a name="TOC-JSON-Field-Naming-Support"></a>JSON Field Naming Support</h3>Gson
 supports some pre-defined field naming policies to convert the standard
 Java field names (i.e. camel cased names starting with lower case --- 
"sampleFieldNameInJava") to a Json field name (i.e. 
sample_field_name_in_java or SampleFieldNameInJava). See the <a href="http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/FieldNamingPolicy.html" style="font-family:courier new,monospace">FieldNamingPolicy</a> class for information on the pre-defined naming policies.<br><br>It
 also has an annotation based strategy to allows clients to define 
custom names on a per field basis.&nbsp; Note, that the annotation based
 strategy has field name validation which will raise "Runtime" 
exceptions if an invalid field name is provided as the annotation value.<br><br>The following is an example of how to use both Gson naming policy features:<br><span style="font-family:courier new,monospace"><br>private class SomeObject {</span><span style="font-family:courier new,monospace"><br>&nbsp; @SerializedName("custom_naming") private final String someField;<br>&nbsp; private final String someOtherField;<br><br>&nbsp; public SomeObject(String a, String b) {<br>&nbsp;&nbsp;&nbsp; this.someField = a;<br>&nbsp;&nbsp;&nbsp; this.someOtherField = b;<br>&nbsp; }<br></span><span style="font-family:courier new,monospace">}</span><br><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">SomeObject someObject = new SomeObject("first", "second");</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">String jsonRepresentation = gson.toJson(someObject);</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">System.out.println(jsonRepresentation);</span><br style="font-family:courier new,monospace"><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">======== OUTPUT ========</span><br style="font-family:courier new,monospace"><span style="font-family:courier new,monospace">{"custom_naming":"first","SomeOtherField":"second"}</span><br><br></div><div>If you have a need for custom naming policy (<a href="http://groups.google.com/group/google-gson/browse_thread/thread/cb441a2d717f6892">see this discussion</a>), you can use the <a href="http://google-gson.googlecode.com/svn/tags/1.2.3/docs/javadocs/com/google/gson/annotations/SerializedName.html">@SerializedName</a> annotation.&nbsp;<br><h3><a name="TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers"></a>Sharing State Across Custom Serializers and Deserializers</h3></div><div>Sometimes you need to share state across custom serializers/deserializers (<a href="http://groups.google.com/group/google-gson/browse_thread/thread/2850010691ea09fb">see this discussion</a>). You can use the following three strategies to accomplish this:&nbsp;</div><div><ol><li>Store shared state in static fields</li><li>Declare
 the serializer/deserializer as inner classes of a parent type, and use 
the instance fields of parent type to store shared state</li><li>Use Java ThreadLocal</li></ol><div>1 and 2 are not thread-safe options, but 3 is.&nbsp;</div><div><br></div><h3><a name="TOC-Streaming"></a>Streaming</h3><div>In addition Gson's object model and data binding, you can use Gson to read from and write to a&nbsp;<a href="https://sites.google.com/site/gson/streaming">stream</a>. You can also combine streaming and object model access to get the best of both approaches.</div><h2><a name="TOC-Issues-in-Designing-Gson"></a>Issues in Designing Gson</h2>See the <a href="https://sites.google.com/site/gson/gson-design-document" title="Gson design document">Gson design document</a>
for a discussion of issues we faced while designing Gson. It also
include a comparison of Gson with other Java libraries that can be used
for Json conversion.<br><h2><a name="TOC-Future-Enhancements-to-Gson"></a>Future Enhancements to Gson</h2>For the latest list of proposed enhancements or if you'd like to suggest new ones, see the <a href="http://code.google.com/p/google-gson/issues/list" title="Issues section">Issues section</a> under the project website. <br></div></div></div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages" class="sites-canvas-bottom-panel-wrapper" style="">
<div class="sites-subpages">
            子页面 <span id="subpages-total-number">(1)：</span>
<span>
<a href="https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2" dir="ltr">Using Gson with Maven2</a>
</span>
</div>
</div>
<div id="sites-attachments-container">
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments"><div class="sites-comment-docos-wrapper"><div class="sites-comment-docos"><div class="sites-comment-docos-background"></div><div class="sites-comment-docos-header"><div class="sites-comment-docos-header-title">评论</div></div><div id="sites-comment-docos-pane" class="sites-comment-docos-pane"></div></div></div></div>
</div>
</div> 
</td> 
</tr>
</tbody></table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter" role="navigation"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=https://sites.google.com/site/gson/gson-user-guide">登录</a><span aria-hidden="true">|</span><a class="sites-system-link" href="https://sites.google.com/site/gson/system/app/pages/recentChanges">最近的网站活动</a><span aria-hidden="true">|</span><a class="sites-system-link" href="https://sites.google.com/site/gson/system/app/pages/reportAbuse" target="_blank">举报滥用行为</a><span aria-hidden="true">|</span><a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">打印页面</a><span aria-hidden="true">|</span><span class="sites-system-link">由</span> <b class="powered-by"><a href="http://sites.google.com/">Google 协作平台强力驱动</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>

<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="Gson%20User%20Guide%20-%20gson_files/jot_min_view__zh_cn.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
  if (webspace.editorResources['text']) {
    //<![CDATA[
webspace.editorResources['text'].unshift('/site/gson/_/rsrc/1416990942000/system/app/themes/default/standard-css-default-ltr-ltr.css');
//]]>

  }
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
    
        sites.core.Analytics.createTracker();
        sites.core.Analytics.trackPageview();
      
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
                    sites.Searchbox.initialize(
                        'sites-searchbox-search-button',
                        {"object":[]}['object'],
                        'search-site',
                        {"label":"\u914d\u7f6e\u641c\u7d22\u9009\u9879...","url":"/site/gson/system/app/pages/admin/settings"});
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("2bd", "导航", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_2bd');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
          JOT_addListener('titleChange', 'JOT_RECENTCHANGES_titleChange', 'COMP_30ac');
        </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXu-VcMC14xLqgJFrfQGoZk5uOmfpPPbgfAvSXbjBqL6GvkoBl1H_oytZ9a9TlBmj0AYsqIdL5dO7v9X1pNjLLHT9uwcM8zY499rlDyDvQIAQVNVQAA/api/js?anon=true', true, true,
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('https://sites.google.com/site/gson/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'https://gg.google.com/csi');
                    }
                  </script>

<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "zh_CN");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
 //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
          JOT_setupNoticeManager();
        </script>
<script type="text/javascript">
          JOT_postEvent('renderPlus', null, 'sites-chrome-main');
        </script>
<div id="server-timer-div" style="display:none"> </div>
<script type="text/javascript">
          window.jstiming.load.tick('render');
          JOT_postEvent('usercontentrendered', this);
        </script>


</body></html>